{"ast":null,"code":"async function logIn(credentials, type) {\n  //call: POST /api/...\n  let response = null;\n\n  switch (type) {\n    case \"C\":\n      response = await fetch(\"/api/customerSessions\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(credentials)\n      });\n      break;\n\n    case \"M\":\n      response = await fetch(\"/api/managerSessions\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(credentials)\n      });\n      break;\n\n    case \"S\":\n      response = await fetch(\"/api/supplierSessions\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(credentials)\n      });\n      break;\n\n    case \"K\":\n      response = await fetch(\"/api/clerkSessions\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(credentials)\n      });\n      break;\n\n    case \"Q\":\n      response = await fetch(\"/api/qualityEmployeeSessions\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(credentials)\n      });\n      break;\n\n    case \"D\":\n      response = await fetch(\"/api/deliveryEmployeeSessions\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(credentials)\n      });\n      break;\n\n    default:\n      //error: \n      console.log(\"How did you get that?\");\n      return null;\n  }\n\n  if (response.ok) {\n    console.log(\"client: login returned ok from server\");\n    let user = await response.json();\n    user.type = type;\n    return user;\n  } else {\n    try {\n      const errDetail = await response.json();\n      throw errDetail.message;\n    } catch (err) {\n      throw err;\n    }\n  }\n}\n\nasync function logOut() {\n  await fetch(\"/api/logout\", {\n    method: \"POST\"\n  });\n}\n\nasync function getUserInfo() {\n  const response = await fetch(\"/api/userinfo\");\n  const userInfo = await response.json();\n\n  if (response.ok) {\n    return userInfo;\n  } else {\n    throw userInfo; // an object with the error coming from the server\n  }\n}\n\nfunction addPosition(newPosition) {\n  // call: POST /api/position\n  return new Promise((resolve, reject) => {\n    fetch(\"/api/position\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(newPosition)\n    }).then(response => {\n      if (response.ok) {\n        resolve(true);\n      } else {\n        response.json().then(obj => {\n          reject(obj);\n        }) // error msg in the response body\n        .catch(err => {\n          reject({\n            errors: [{\n              param: \"Application\",\n              msg: \"Cannot parse server response\"\n            }]\n          });\n        }); // something else\n      }\n    }).catch(err => {\n      reject({\n        errors: [{\n          param: \"Server\",\n          msg: \"Cannot communicate\"\n        }]\n      });\n    }); // connection errors\n  });\n}\n\nconst getPositions = async () => {\n  // call: GET /api/positions\n  const response = await fetch(\"/api/positions\");\n  const positions = await response.json();\n\n  if (response.ok) {\n    return positions;\n  }\n};\n\nfunction editPositionBarcode(oldCode, newCode) {\n  // call: PUT /api/position\n  return new Promise((resolve, reject) => {\n    fetch(\"/api/position/\" + oldCode + \"/changeCode\", {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        newBarcode: newCode\n      })\n    }).then(response => {\n      if (response.ok) {\n        resolve(true);\n      } else {\n        response.json().then(obj => {\n          reject(obj);\n        }) // error msg in the response body\n        .catch(err => {\n          reject({\n            errors: [{\n              param: \"Application\",\n              msg: \"Cannot parse server response\"\n            }]\n          });\n        }); // something else\n      }\n    }).catch(err => {\n      reject({\n        errors: [{\n          param: \"Server\",\n          msg: \"Cannot communicate\"\n        }]\n      });\n    }); // connection errors\n  });\n}\n\nfunction editPosition(newPosition) {\n  // call: PUT /api/position\n  return new Promise((resolve, reject) => {\n    fetch(\"/api/position/\" + newPosition.barcode, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(newPosition)\n    }).then(response => {\n      if (response.ok) {\n        resolve(true);\n      } else {\n        response.json().then(obj => {\n          reject(obj);\n        }) // error msg in the response body\n        .catch(err => {\n          reject({\n            errors: [{\n              param: \"Application\",\n              msg: \"Cannot parse server response\"\n            }]\n          });\n        }); // something else\n      }\n    }).catch(err => {\n      reject({\n        errors: [{\n          param: \"Server\",\n          msg: \"Cannot communicate\"\n        }]\n      });\n    }); // connection errors\n  });\n}\n\nfunction deletePosition(barcode) {\n  return new Promise((resolve, reject) => {\n    fetch(\"/api/position/\" + barcode, {\n      method: \"DELETE\"\n    }).then(response => {\n      if (response.ok) {\n        resolve(true);\n      } else {\n        response.json().then(obj => {\n          reject(obj);\n        }) // error msg in the response body\n        .catch(err => {\n          reject({\n            errors: [{\n              param: \"Application\",\n              msg: \"Cannot parse server response\"\n            }]\n          });\n        }); // something else\n      }\n    }).catch(err => {\n      reject({\n        errors: [{\n          param: \"Server\",\n          msg: \"Cannot communicate\"\n        }]\n      });\n    }); // connection errors\n  });\n}\n\nconst getSKU = async () => {\n  // call: GET /api/skus\n  const response = await fetch(\"/api/skus\");\n  const skus = await response.json();\n\n  if (response.ok) {\n    return skus;\n  }\n};\n\nconst getSingleSKU = async id => {\n  // call: GET /api/skus/:id\n  const response = await fetch(\"/api/skus/\" + id);\n  const sku = await response.json();\n\n  if (response.ok) {\n    return sku;\n  }\n};\n\nfunction addSKU(newSku) {\n  // call: POST /api/sku\n  return new Promise((resolve, reject) => {\n    fetch(\"/api/sku\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(newSku)\n    }).then(response => {\n      if (response.ok) {\n        resolve(true);\n      } else {\n        response.json().then(obj => {\n          reject(obj);\n        }) // error msg in the response body\n        .catch(err => {\n          reject({\n            errors: [{\n              param: \"Application\",\n              msg: \"Cannot parse server response\"\n            }]\n          });\n        }); // something else\n      }\n    }).catch(err => {\n      reject({\n        errors: [{\n          param: \"Server\",\n          msg: \"Cannot communicate\"\n        }]\n      });\n    }); // connection errors\n  });\n}\n\nfunction editSKU(id, newSKU) {\n  // call: PUT /api/sku/:id\n  return new Promise((resolve, reject) => {\n    fetch(\"/api/sku/\" + id, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(newSKU)\n    }).then(response => {\n      if (response.ok) {\n        resolve(true);\n      } else {\n        response.json().then(obj => {\n          reject(obj);\n        }) // error msg in the response body\n        .catch(err => {\n          reject({\n            errors: [{\n              param: \"Application\",\n              msg: \"Cannot parse server response\"\n            }]\n          });\n        }); // something else\n      }\n    }).catch(err => {\n      reject({\n        errors: [{\n          param: \"Server\",\n          msg: \"Cannot communicate\"\n        }]\n      });\n    }); // connection errors\n  });\n}\n\nfunction deleteSKU(id) {\n  return new Promise((resolve, reject) => {\n    fetch(\"/api/skus/\" + id, {\n      method: \"DELETE\"\n    }).then(response => {\n      if (response.ok) {\n        resolve(true);\n      } else {\n        response.json().then(obj => {\n          reject(obj);\n        }) // error msg in the response body\n        .catch(err => {\n          reject({\n            errors: [{\n              param: \"Application\",\n              msg: \"Cannot parse server response\"\n            }]\n          });\n        }); // something else\n      }\n    }).catch(err => {\n      reject({\n        errors: [{\n          param: \"Server\",\n          msg: \"Cannot communicate\"\n        }]\n      });\n    }); // connection errors\n  });\n}\n\nfunction editSKUPosition(id, barcode) {\n  // call: PUT /api/sku/:id/position\n  return new Promise((resolve, reject) => {\n    fetch(\"/api/sku/\" + id + \"/position\", {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        position: barcode\n      })\n    }).then(response => {\n      if (response.ok) {\n        resolve(true);\n      } else {\n        response.json().then(obj => {\n          reject(obj);\n        }) // error msg in the response body\n        .catch(err => {\n          reject({\n            errors: [{\n              param: \"Application\",\n              msg: \"Cannot parse server response\"\n            }]\n          });\n        }); // something else\n      }\n    }).catch(err => {\n      reject({\n        errors: [{\n          param: \"Server\",\n          msg: \"Cannot communicate\"\n        }]\n      });\n    }); // connection errors\n  });\n}\n\nconst getTestDescriptors = async () => {\n  // call: GET /api/testDescriptors\n  const response = await fetch(\"/api/testDescriptors\");\n  const testDescriptors = await response.json();\n\n  if (response.ok) {\n    return testDescriptors;\n  }\n};\n\nfunction addTestDescriptor(newTestDescriptor) {\n  // call: POST /api/testDescriptor\n  return new Promise((resolve, reject) => {\n    fetch(\"/api/testDescriptor\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(newTestDescriptor)\n    }).then(response => {\n      if (response.ok) {\n        resolve(true);\n      } else {\n        response.json().then(obj => {\n          reject(obj);\n        }) // error msg in the response body\n        .catch(err => {\n          reject({\n            errors: [{\n              param: \"Application\",\n              msg: \"Cannot parse server response\"\n            }]\n          });\n        }); // something else\n      }\n    }).catch(err => {\n      reject({\n        errors: [{\n          param: \"Server\",\n          msg: \"Cannot communicate\"\n        }]\n      });\n    }); // connection errors\n  });\n}\n\nfunction editTestDescriptor(id, newTestDescriptor) {\n  // call: PUT /api/testDescriptor/:id\n  return new Promise((resolve, reject) => {\n    fetch(\"/api/testDescriptor/\" + id, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(newTestDescriptor)\n    }).then(response => {\n      if (response.ok) {\n        resolve(true);\n      } else {\n        response.json().then(obj => {\n          reject(obj);\n        }) // error msg in the response body\n        .catch(err => {\n          reject({\n            errors: [{\n              param: \"Application\",\n              msg: \"Cannot parse server response\"\n            }]\n          });\n        }); // something else\n      }\n    }).catch(err => {\n      reject({\n        errors: [{\n          param: \"Server\",\n          msg: \"Cannot communicate\"\n        }]\n      });\n    }); // connection errors\n  });\n}\n\nfunction deleteTestDescriptor(id) {\n  return new Promise((resolve, reject) => {\n    fetch(\"/api/testDescriptor/\" + id, {\n      method: \"DELETE\"\n    }).then(response => {\n      if (response.ok) {\n        resolve(true);\n      } else {\n        response.json().then(obj => {\n          reject(obj);\n        }) // error msg in the response body\n        .catch(err => {\n          reject({\n            errors: [{\n              param: \"Application\",\n              msg: \"Cannot parse server response\"\n            }]\n          });\n        }); // something else\n      }\n    }).catch(err => {\n      reject({\n        errors: [{\n          param: \"Server\",\n          msg: \"Cannot communicate\"\n        }]\n      });\n    }); // connection errors\n  });\n}\n\nconst getUsers = async () => {\n  // call: GET /api/users\n  const response = await fetch(\"/api/users\");\n  const users = await response.json();\n\n  if (response.ok) {\n    return users;\n  }\n};\n\nconst getSuppliers = async () => {\n  // call: GET /api/suppliers\n  const response = await fetch(\"/api/suppliers\");\n  const suppliers = await response.json();\n\n  if (response.ok) {\n    return suppliers;\n  }\n};\n\nfunction addUser(newUser) {\n  // call: POST /api/newUser\n  return new Promise((resolve, reject) => {\n    fetch(\"/api/newUser\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(newUser)\n    }).then(response => {\n      if (response.ok) {\n        resolve(true);\n      } else {\n        response.json().then(obj => {\n          reject(obj);\n        }) // error msg in the response body\n        .catch(err => {\n          reject({\n            errors: [{\n              param: \"Application\",\n              msg: \"Cannot parse server response\"\n            }]\n          });\n        }); // something else\n      }\n    }).catch(err => {\n      reject({\n        errors: [{\n          param: \"Server\",\n          msg: \"Cannot communicate\"\n        }]\n      });\n    }); // connection errors\n  });\n}\n\nfunction editUser(username, newUser) {\n  // call: PUT /api/users/:username\n  return new Promise((resolve, reject) => {\n    fetch(\"/api/users/\" + username, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(newUser)\n    }).then(response => {\n      if (response.ok) {\n        resolve(true);\n      } else {\n        response.json().then(obj => {\n          reject(obj);\n        }) // error msg in the response body\n        .catch(err => {\n          reject({\n            errors: [{\n              param: \"Application\",\n              msg: \"Cannot parse server response\"\n            }]\n          });\n        }); // something else\n      }\n    }).catch(err => {\n      reject({\n        errors: [{\n          param: \"Server\",\n          msg: \"Cannot communicate\"\n        }]\n      });\n    }); // connection errors\n  });\n}\n\nfunction deleteUser(username, type) {\n  return new Promise((resolve, reject) => {\n    fetch(\"/api/users/\" + username + \"/\" + type, {\n      method: \"DELETE\"\n    }).then(response => {\n      if (response.ok) {\n        resolve(true);\n      } else {\n        response.json().then(obj => {\n          reject(obj);\n        }) // error msg in the response body\n        .catch(err => {\n          reject({\n            errors: [{\n              param: \"Application\",\n              msg: \"Cannot parse server response\"\n            }]\n          });\n        }); // something else\n      }\n    }).catch(err => {\n      reject({\n        errors: [{\n          param: \"Server\",\n          msg: \"Cannot communicate\"\n        }]\n      });\n    }); // connection errors\n  });\n}\n\nconst getIOIssued = async () => {\n  // call: GET /api/internalOrdersIssued\n  const response = await fetch(\"/api/internalOrdersIssued\");\n  const IOs = await response.json();\n\n  if (response.ok) {\n    return IOs;\n  }\n};\n\nconst getIOAccepted = async () => {\n  // call: GET /api/internalOrdersAccepted\n  const response = await fetch(\"/api/internalOrdersAccepted\");\n  const IOs = await response.json();\n\n  if (response.ok) {\n    return IOs;\n  }\n};\n\nconst getSingleIO = async id => {\n  // call: GET /api/internalOrders/:id\n  const response = await fetch(\"/api/internalOrders/\" + id);\n  const IO = await response.json();\n\n  if (response.ok) {\n    return IO;\n  }\n};\n\nfunction addIO(newIO) {\n  // call: POST /api/internalOrders\n  return new Promise((resolve, reject) => {\n    fetch(\"/api/internalOrders\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(newIO)\n    }).then(response => {\n      if (response.ok) {\n        resolve(true);\n      } else {\n        response.json().then(obj => {\n          reject(obj);\n        }) // error msg in the response body\n        .catch(err => {\n          reject({\n            errors: [{\n              param: \"Application\",\n              msg: \"Cannot parse server response\"\n            }]\n          });\n        }); // something else\n      }\n    }).catch(err => {\n      reject({\n        errors: [{\n          param: \"Server\",\n          msg: \"Cannot communicate\"\n        }]\n      });\n    }); // connection errors\n  });\n}\n\nfunction editIO(id, newIO) {\n  // call: PUT /api/internalOrders/:id\n  return new Promise((resolve, reject) => {\n    fetch(\"/api/internalOrders/\" + id, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(newIO)\n    }).then(response => {\n      if (response.ok) {\n        resolve(true);\n      } else {\n        response.json().then(obj => {\n          reject(obj);\n        }) // error msg in the response body\n        .catch(err => {\n          reject({\n            errors: [{\n              param: \"Application\",\n              msg: \"Cannot parse server response\"\n            }]\n          });\n        }); // something else\n      }\n    }).catch(err => {\n      reject({\n        errors: [{\n          param: \"Server\",\n          msg: \"Cannot communicate\"\n        }]\n      });\n    }); // connection errors\n  });\n}\n\nconst getROIssued = async () => {\n  // call: GET /api/restockOrdersIssued\n  const response = await fetch(\"/api/restockOrdersIssued\");\n  const ROs = await response.json();\n\n  if (response.ok) {\n    return ROs;\n  }\n};\n\nconst getRO = async () => {\n  // call: GET /api/restockOrders\n  const response = await fetch(\"/api/restockOrders\");\n  const ROs = await response.json();\n\n  if (response.ok) {\n    return ROs;\n  }\n};\n\nfunction addRO(newRO) {\n  // call: POST /api/restockOrder\n  return new Promise((resolve, reject) => {\n    fetch(\"/api/restockOrder\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(newRO)\n    }).then(response => {\n      if (response.ok) {\n        resolve(true);\n      } else {\n        response.json().then(obj => {\n          reject(obj);\n        }) // error msg in the response body\n        .catch(err => {\n          reject({\n            errors: [{\n              param: \"Application\",\n              msg: \"Cannot parse server response\"\n            }]\n          });\n        }); // something else\n      }\n    }).catch(err => {\n      reject({\n        errors: [{\n          param: \"Server\",\n          msg: \"Cannot communicate\"\n        }]\n      });\n    }); // connection errors\n  });\n}\n\nfunction editRO(id, newRO) {\n  // call: PUT /api/restockOrder/:id\n  return new Promise((resolve, reject) => {\n    fetch(\"/api/restockOrder/\" + id, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(newRO)\n    }).then(response => {\n      if (response.ok) {\n        resolve(true);\n      } else {\n        response.json().then(obj => {\n          reject(obj);\n        }) // error msg in the response body\n        .catch(err => {\n          reject({\n            errors: [{\n              param: \"Application\",\n              msg: \"Cannot parse server response\"\n            }]\n          });\n        }); // something else\n      }\n    }).catch(err => {\n      reject({\n        errors: [{\n          param: \"Server\",\n          msg: \"Cannot communicate\"\n        }]\n      });\n    }); // connection errors\n  });\n}\n\nfunction addTransportNoteRO(id, newRO) {\n  // call: PUT /api/restockOrder/:id/transportNote\n  return new Promise((resolve, reject) => {\n    fetch(\"/api/restockOrder/\" + id + \"/transportNote\", {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(newRO)\n    }).then(response => {\n      if (response.ok) {\n        resolve(true);\n      } else {\n        response.json().then(obj => {\n          reject(obj);\n        }) // error msg in the response body\n        .catch(err => {\n          reject({\n            errors: [{\n              param: \"Application\",\n              msg: \"Cannot parse server response\"\n            }]\n          });\n        }); // something else\n      }\n    }).catch(err => {\n      reject({\n        errors: [{\n          param: \"Server\",\n          msg: \"Cannot communicate\"\n        }]\n      });\n    }); // connection errors\n  });\n}\n\nconst getSKUItems = async () => {\n  // call: GET /api/skuitems\n  const response = await fetch(\"/api/skuitems\");\n  const SKUItems = await response.json();\n\n  if (response.ok) {\n    return SKUItems;\n  }\n};\n\nfunction addSKUItem(newSkuItem) {\n  // call: POST /api/skuitem\n  return new Promise((resolve, reject) => {\n    fetch(\"/api/skuitem\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(newSkuItem)\n    }).then(response => {\n      if (response.ok) {\n        resolve(true);\n      } else {\n        response.json().then(obj => {\n          reject(obj);\n        }) // error msg in the response body\n        .catch(err => {\n          reject({\n            errors: [{\n              param: \"Application\",\n              msg: \"Cannot parse server response\"\n            }]\n          });\n        }); // something else\n      }\n    }).catch(err => {\n      reject({\n        errors: [{\n          param: \"Server\",\n          msg: \"Cannot communicate\"\n        }]\n      });\n    }); // connection errors\n  });\n}\n\nconst getSingleRO = async id => {\n  // call: GET /api/restockOrders/:id\n  const response = await fetch(\"/api/restockOrders/\" + id);\n  const RO = await response.json();\n\n  if (response.ok) {\n    return RO;\n  }\n};\n\nfunction addSkuItemsRO(id, newRO) {\n  // call: PUT /api/restockOrder/:id/skuItems\n  return new Promise((resolve, reject) => {\n    fetch(\"/api/restockOrder/\" + id + \"/skuItems\", {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(newRO)\n    }).then(response => {\n      if (response.ok) {\n        resolve(true);\n      } else {\n        response.json().then(obj => {\n          reject(obj);\n        }) // error msg in the response body\n        .catch(err => {\n          reject({\n            errors: [{\n              param: \"Application\",\n              msg: \"Cannot parse server response\"\n            }]\n          });\n        }); // something else\n      }\n    }).catch(err => {\n      reject({\n        errors: [{\n          param: \"Server\",\n          msg: \"Cannot communicate\"\n        }]\n      });\n    }); // connection errors\n  });\n}\n\nfunction addTestResult(newTestResult) {\n  // call: POST /api/skuitems/testResult\n  return new Promise((resolve, reject) => {\n    fetch(\"/api/skuitems/testResult\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(newTestResult)\n    }).then(response => {\n      if (response.ok) {\n        resolve(true);\n      } else {\n        response.json().then(obj => {\n          reject(obj);\n        }) // error msg in the response body\n        .catch(err => {\n          reject({\n            errors: [{\n              param: \"Application\",\n              msg: \"Cannot parse server response\"\n            }]\n          });\n        }); // something else\n      }\n    }).catch(err => {\n      reject({\n        errors: [{\n          param: \"Server\",\n          msg: \"Cannot communicate\"\n        }]\n      });\n    }); // connection errors\n  });\n}\n\nconst getTestResults = async rfid => {\n  // call: GET /api/skuitems/:rfid/testResults\n  const response = await fetch(\"/api/skuitems/\" + rfid + \"/testResults\");\n  const TestResults = await response.json();\n\n  if (response.ok) {\n    return TestResults;\n  }\n};\n\nconst getSingleSKUItem = async rfid => {\n  // call: GET /api/skuitems/:rfid\n  const response = await fetch(\"/api/skuitems/\" + rfid);\n  const item = await response.json();\n\n  if (response.ok) {\n    return item;\n  }\n};\n\nfunction editSKUItem(rfid, newSKUItem) {\n  // call: PUT /api/skuitems/:rfid\n  return new Promise((resolve, reject) => {\n    fetch(\"/api/skuitems/\" + rfid, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(newSKUItem)\n    }).then(response => {\n      if (response.ok) {\n        resolve(true);\n      } else {\n        response.json().then(obj => {\n          reject(obj);\n        }) // error msg in the response body\n        .catch(err => {\n          reject({\n            errors: [{\n              param: \"Application\",\n              msg: \"Cannot parse server response\"\n            }]\n          });\n        }); // something else\n      }\n    }).catch(err => {\n      reject({\n        errors: [{\n          param: \"Server\",\n          msg: \"Cannot communicate\"\n        }]\n      });\n    }); // connection errors\n  });\n}\n\nconst getSKUItemsToReturn = async id => {\n  // call: GET /api/restockOrders/:id/returnItems\n  const response = await fetch(\"/api/restockOrders/\" + id + \"/returnItems\");\n  const items = await response.json();\n\n  if (response.ok) {\n    return items;\n  }\n};\n\nfunction addREO(newREO) {\n  // call: POST /api/returnOrder\n  return new Promise((resolve, reject) => {\n    fetch(\"/api/returnOrder\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(newREO)\n    }).then(response => {\n      if (response.ok) {\n        resolve(true);\n      } else {\n        response.json().then(obj => {\n          reject(obj);\n        }) // error msg in the response body\n        .catch(err => {\n          reject({\n            errors: [{\n              param: \"Application\",\n              msg: \"Cannot parse server response\"\n            }]\n          });\n        }); // something else\n      }\n    }).catch(err => {\n      reject({\n        errors: [{\n          param: \"Server\",\n          msg: \"Cannot communicate\"\n        }]\n      });\n    }); // connection errors\n  });\n}\n\nconst getItem = async () => {\n  // call: GET /api/items\n  const response = await fetch(\"/api/items\");\n  const items = await response.json();\n\n  if (response.ok) {\n    return items;\n  }\n};\n\nfunction addItem(newItem) {\n  // call: POST /api/item\n  return new Promise((resolve, reject) => {\n    fetch(\"/api/item\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(newItem)\n    }).then(response => {\n      if (response.ok) {\n        resolve(true);\n      } else {\n        response.json().then(obj => {\n          reject(obj);\n        }) // error msg in the response body\n        .catch(err => {\n          reject({\n            errors: [{\n              param: \"Application\",\n              msg: \"Cannot parse server response\"\n            }]\n          });\n        }); // something else\n      }\n    }).catch(err => {\n      reject({\n        errors: [{\n          param: \"Server\",\n          msg: \"Cannot communicate\"\n        }]\n      });\n    }); // connection errors\n  });\n}\n\nfunction editItem(id, newItem) {\n  // call: PUT /api/item/:id\n  return new Promise((resolve, reject) => {\n    fetch(\"/api/item/\" + id, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(newItem)\n    }).then(response => {\n      if (response.ok) {\n        resolve(true);\n      } else {\n        response.json().then(obj => {\n          reject(obj);\n        }) // error msg in the response body\n        .catch(err => {\n          reject({\n            errors: [{\n              param: \"Application\",\n              msg: \"Cannot parse server response\"\n            }]\n          });\n        }); // something else\n      }\n    }).catch(err => {\n      reject({\n        errors: [{\n          param: \"Server\",\n          msg: \"Cannot communicate\"\n        }]\n      });\n    }); // connection errors\n  });\n}\n\nfunction deleteItem(id) {\n  return new Promise((resolve, reject) => {\n    fetch(\"/api/items/\" + id, {\n      method: \"DELETE\"\n    }).then(response => {\n      if (response.ok) {\n        resolve(true);\n      } else {\n        response.json().then(obj => {\n          reject(obj);\n        }) // error msg in the response body\n        .catch(err => {\n          reject({\n            errors: [{\n              param: \"Application\",\n              msg: \"Cannot parse server response\"\n            }]\n          });\n        }); // something else\n      }\n    }).catch(err => {\n      reject({\n        errors: [{\n          param: \"Server\",\n          msg: \"Cannot communicate\"\n        }]\n      });\n    }); // connection errors\n  });\n}\n\nconst API = {\n  logIn,\n  logOut,\n  getUserInfo,\n  addPosition,\n  getPositions,\n  editPosition,\n  editPositionBarcode,\n  deletePosition,\n  getSKU,\n  getSingleSKU,\n  addSKU,\n  editSKU,\n  deleteSKU,\n  editSKUPosition,\n  getTestDescriptors,\n  addTestDescriptor,\n  editTestDescriptor,\n  deleteTestDescriptor,\n  getUsers,\n  addUser,\n  editUser,\n  deleteUser,\n  getIOIssued,\n  getIOAccepted,\n  addIO,\n  editIO,\n  getSingleIO,\n  getSuppliers,\n  getSingleRO,\n  getROIssued,\n  getRO,\n  addRO,\n  editRO,\n  addTransportNoteRO,\n  getSKUItems,\n  addSKUItem,\n  addSkuItemsRO,\n  addTestResult,\n  getTestResults,\n  getSingleSKUItem,\n  editSKUItem,\n  getSKUItemsToReturn,\n  addREO,\n  getItem,\n  addItem,\n  editItem,\n  deleteItem\n};\nexport default API;","map":{"version":3,"sources":["C:/Users/ismae/EzWh/code/client/src/API.js"],"names":["logIn","credentials","type","response","fetch","method","headers","body","JSON","stringify","console","log","ok","user","json","errDetail","message","err","logOut","getUserInfo","userInfo","addPosition","newPosition","Promise","resolve","reject","then","obj","catch","errors","param","msg","getPositions","positions","editPositionBarcode","oldCode","newCode","newBarcode","editPosition","barcode","deletePosition","getSKU","skus","getSingleSKU","id","sku","addSKU","newSku","editSKU","newSKU","deleteSKU","editSKUPosition","position","getTestDescriptors","testDescriptors","addTestDescriptor","newTestDescriptor","editTestDescriptor","deleteTestDescriptor","getUsers","users","getSuppliers","suppliers","addUser","newUser","editUser","username","deleteUser","getIOIssued","IOs","getIOAccepted","getSingleIO","IO","addIO","newIO","editIO","getROIssued","ROs","getRO","addRO","newRO","editRO","addTransportNoteRO","getSKUItems","SKUItems","addSKUItem","newSkuItem","getSingleRO","RO","addSkuItemsRO","addTestResult","newTestResult","getTestResults","rfid","TestResults","getSingleSKUItem","item","editSKUItem","newSKUItem","getSKUItemsToReturn","items","addREO","newREO","getItem","addItem","newItem","editItem","deleteItem","API"],"mappings":"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","sourcesContent":["async function logIn(credentials, type) {\r\n    //call: POST /api/...\r\n    let response = null;\r\n    switch (type) {\r\n      case \"C\":\r\n        response = await fetch(\"/api/customerSessions\", {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify(credentials),\r\n        });\r\n        break;\r\n      case \"M\":\r\n        response = await fetch(\"/api/managerSessions\", {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify(credentials),\r\n        });\r\n        break;\r\n      case \"S\":\r\n        response = await fetch(\"/api/supplierSessions\", {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify(credentials),\r\n        });\r\n        break;\r\n      case \"K\":\r\n        response = await fetch(\"/api/clerkSessions\", {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify(credentials),\r\n        });\r\n        break;\r\n      case \"Q\":\r\n        response = await fetch(\"/api/qualityEmployeeSessions\", {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify(credentials),\r\n        });\r\n        break;\r\n      case \"D\":\r\n        response = await fetch(\"/api/deliveryEmployeeSessions\", {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify(credentials),\r\n        });\r\n        break;\r\n      default:\r\n        //error: \r\n        console.log(\"How did you get that?\");\r\n        return null;\r\n    }\r\n    if (response.ok) {\r\n      console.log(\"client: login returned ok from server\");\r\n      let user = await response.json();\r\n      user.type = type;\r\n      return user;\r\n    } else {\r\n      try {\r\n        const errDetail = await response.json();\r\n        throw errDetail.message;\r\n      } catch (err) {\r\n        throw err;\r\n      }\r\n    }\r\n  }\r\n  \r\n  async function logOut() {\r\n    await fetch(\"/api/logout\", { method: \"POST\" });\r\n  }\r\n  \r\n  async function getUserInfo() {\r\n    const response = await fetch(\"/api/userinfo\");\r\n    const userInfo = await response.json();\r\n    if (response.ok) {\r\n      return userInfo;\r\n    } else {\r\n      throw userInfo; // an object with the error coming from the server\r\n    }\r\n  }\r\n\r\n  function addPosition(newPosition) {\r\n    // call: POST /api/position\r\n    return new Promise((resolve, reject) => {\r\n      fetch(\"/api/position\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(newPosition),\r\n      })\r\n        .then((response) => {\r\n          if (response.ok) {\r\n            resolve(true);\r\n          } else {\r\n            response\r\n              .json()\r\n              .then((obj) => {\r\n                reject(obj);\r\n              }) // error msg in the response body\r\n              .catch((err) => {\r\n                reject({\r\n                  errors: [\r\n                    { param: \"Application\", msg: \"Cannot parse server response\" },\r\n                  ],\r\n                });\r\n              }); // something else\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          reject({ errors: [{ param: \"Server\", msg: \"Cannot communicate\" }] });\r\n        }); // connection errors\r\n    });\r\n  }\r\n\r\n  const getPositions = async () => {\r\n    // call: GET /api/positions\r\n    const response = await fetch(\"/api/positions\");\r\n    const positions = await response.json();\r\n    if (response.ok) {\r\n      return positions;\r\n    }\r\n  };\r\n\r\n  function editPositionBarcode(oldCode,newCode) {\r\n    // call: PUT /api/position\r\n    return new Promise((resolve, reject) => {\r\n      fetch(\"/api/position/\"+oldCode+\"/changeCode\", {\r\n        method: \"PUT\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({newBarcode:newCode}),\r\n      })\r\n        .then((response) => {\r\n          if (response.ok) {\r\n            resolve(true);\r\n          } else {\r\n            response\r\n              .json()\r\n              .then((obj) => {\r\n                reject(obj);\r\n              }) // error msg in the response body\r\n              .catch((err) => {\r\n                reject({\r\n                  errors: [\r\n                    { param: \"Application\", msg: \"Cannot parse server response\" },\r\n                  ],\r\n                });\r\n              }); // something else\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          reject({ errors: [{ param: \"Server\", msg: \"Cannot communicate\" }] });\r\n        }); // connection errors\r\n    });\r\n  }\r\n\r\n  function editPosition(newPosition) {\r\n    // call: PUT /api/position\r\n    return new Promise((resolve, reject) => {\r\n      fetch(\"/api/position/\"+newPosition.barcode, {\r\n        method: \"PUT\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(newPosition),\r\n      })\r\n        .then((response) => {\r\n          if (response.ok) {\r\n            resolve(true);\r\n          } else {\r\n            response\r\n              .json()\r\n              .then((obj) => {\r\n                reject(obj);\r\n              }) // error msg in the response body\r\n              .catch((err) => {\r\n                reject({\r\n                  errors: [\r\n                    { param: \"Application\", msg: \"Cannot parse server response\" },\r\n                  ],\r\n                });\r\n              }); // something else\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          reject({ errors: [{ param: \"Server\", msg: \"Cannot communicate\" }] });\r\n        }); // connection errors\r\n    });\r\n  }\r\n\r\n  function deletePosition(barcode){\r\n    return new Promise((resolve, reject) => {\r\n      fetch(\"/api/position/\"+barcode, {\r\n        method: \"DELETE\"\r\n      })\r\n        .then((response) => {\r\n          if (response.ok) {\r\n            resolve(true);\r\n          } else {\r\n            response\r\n              .json()\r\n              .then((obj) => {\r\n                reject(obj);\r\n              }) // error msg in the response body\r\n              .catch((err) => {\r\n                reject({\r\n                  errors: [\r\n                    { param: \"Application\", msg: \"Cannot parse server response\" },\r\n                  ],\r\n                });\r\n              }); // something else\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          reject({ errors: [{ param: \"Server\", msg: \"Cannot communicate\" }] });\r\n        }); // connection errors\r\n    });\r\n}\r\n\r\nconst getSKU = async () => {\r\n  // call: GET /api/skus\r\n  const response = await fetch(\"/api/skus\");\r\n  const skus = await response.json();\r\n  if (response.ok) {\r\n    return skus;\r\n  }\r\n};\r\n\r\nconst getSingleSKU = async (id) => {\r\n  // call: GET /api/skus/:id\r\n  const response = await fetch(\"/api/skus/\"+id);\r\n  const sku = await response.json();\r\n  if (response.ok) {\r\n    return sku;\r\n  }\r\n};\r\n\r\n\r\nfunction addSKU(newSku) {\r\n  // call: POST /api/sku\r\n  return new Promise((resolve, reject) => {\r\n    fetch(\"/api/sku\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(newSku),\r\n    })\r\n      .then((response) => {\r\n        if (response.ok) {\r\n          resolve(true);\r\n        } else {\r\n          response\r\n            .json()\r\n            .then((obj) => {\r\n              reject(obj);\r\n            }) // error msg in the response body\r\n            .catch((err) => {\r\n              reject({\r\n                errors: [\r\n                  { param: \"Application\", msg: \"Cannot parse server response\" },\r\n                ],\r\n              });\r\n            }); // something else\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        reject({ errors: [{ param: \"Server\", msg: \"Cannot communicate\" }] });\r\n      }); // connection errors\r\n  });\r\n}\r\n\r\nfunction editSKU(id,newSKU) {\r\n  // call: PUT /api/sku/:id\r\n  return new Promise((resolve, reject) => {\r\n    fetch(\"/api/sku/\"+id, {\r\n      method: \"PUT\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(newSKU),\r\n    })\r\n      .then((response) => {\r\n        if (response.ok) {\r\n          resolve(true);\r\n        } else {\r\n          response\r\n            .json()\r\n            .then((obj) => {\r\n              reject(obj);\r\n            }) // error msg in the response body\r\n            .catch((err) => {\r\n              reject({\r\n                errors: [\r\n                  { param: \"Application\", msg: \"Cannot parse server response\" },\r\n                ],\r\n              });\r\n            }); // something else\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        reject({ errors: [{ param: \"Server\", msg: \"Cannot communicate\" }] });\r\n      }); // connection errors\r\n  });\r\n}\r\n\r\nfunction deleteSKU(id){\r\n  return new Promise((resolve, reject) => {\r\n    fetch(\"/api/skus/\"+id, {\r\n      method: \"DELETE\"\r\n    })\r\n      .then((response) => {\r\n        if (response.ok) {\r\n          resolve(true);\r\n        } else {\r\n          response\r\n            .json()\r\n            .then((obj) => {\r\n              reject(obj);\r\n            }) // error msg in the response body\r\n            .catch((err) => {\r\n              reject({\r\n                errors: [\r\n                  { param: \"Application\", msg: \"Cannot parse server response\" },\r\n                ],\r\n              });\r\n            }); // something else\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        reject({ errors: [{ param: \"Server\", msg: \"Cannot communicate\" }] });\r\n      }); // connection errors\r\n  });\r\n}\r\n\r\nfunction editSKUPosition(id,barcode) {\r\n  // call: PUT /api/sku/:id/position\r\n  return new Promise((resolve, reject) => {\r\n    fetch(\"/api/sku/\"+id+\"/position\", {\r\n      method: \"PUT\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({position:barcode}),\r\n    })\r\n      .then((response) => {\r\n        if (response.ok) {\r\n          resolve(true);\r\n        } else {\r\n          response\r\n            .json()\r\n            .then((obj) => {\r\n              reject(obj);\r\n            }) // error msg in the response body\r\n            .catch((err) => {\r\n              reject({\r\n                errors: [\r\n                  { param: \"Application\", msg: \"Cannot parse server response\" },\r\n                ],\r\n              });\r\n            }); // something else\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        reject({ errors: [{ param: \"Server\", msg: \"Cannot communicate\" }] });\r\n      }); // connection errors\r\n  });\r\n}\r\n\r\nconst getTestDescriptors = async () => {\r\n  // call: GET /api/testDescriptors\r\n  const response = await fetch(\"/api/testDescriptors\");\r\n  const testDescriptors = await response.json();\r\n  if (response.ok) {\r\n    return testDescriptors;\r\n  }\r\n};\r\n\r\nfunction addTestDescriptor(newTestDescriptor) {\r\n  // call: POST /api/testDescriptor\r\n  return new Promise((resolve, reject) => {\r\n    fetch(\"/api/testDescriptor\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(newTestDescriptor),\r\n    })\r\n      .then((response) => {\r\n        if (response.ok) {\r\n          resolve(true);\r\n        } else {\r\n          response\r\n            .json()\r\n            .then((obj) => {\r\n              reject(obj);\r\n            }) // error msg in the response body\r\n            .catch((err) => {\r\n              reject({\r\n                errors: [\r\n                  { param: \"Application\", msg: \"Cannot parse server response\" },\r\n                ],\r\n              });\r\n            }); // something else\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        reject({ errors: [{ param: \"Server\", msg: \"Cannot communicate\" }] });\r\n      }); // connection errors\r\n  });\r\n}\r\n\r\nfunction editTestDescriptor(id,newTestDescriptor) {\r\n  // call: PUT /api/testDescriptor/:id\r\n  return new Promise((resolve, reject) => {\r\n    fetch(\"/api/testDescriptor/\"+id, {\r\n      method: \"PUT\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(newTestDescriptor),\r\n    })\r\n      .then((response) => {\r\n        if (response.ok) {\r\n          resolve(true);\r\n        } else {\r\n          response\r\n            .json()\r\n            .then((obj) => {\r\n              reject(obj);\r\n            }) // error msg in the response body\r\n            .catch((err) => {\r\n              reject({\r\n                errors: [\r\n                  { param: \"Application\", msg: \"Cannot parse server response\" },\r\n                ],\r\n              });\r\n            }); // something else\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        reject({ errors: [{ param: \"Server\", msg: \"Cannot communicate\" }] });\r\n      }); // connection errors\r\n  });\r\n}\r\n\r\nfunction deleteTestDescriptor(id){\r\n  return new Promise((resolve, reject) => {\r\n    fetch(\"/api/testDescriptor/\"+id, {\r\n      method: \"DELETE\"\r\n    })\r\n      .then((response) => {\r\n        if (response.ok) {\r\n          resolve(true);\r\n        } else {\r\n          response\r\n            .json()\r\n            .then((obj) => {\r\n              reject(obj);\r\n            }) // error msg in the response body\r\n            .catch((err) => {\r\n              reject({\r\n                errors: [\r\n                  { param: \"Application\", msg: \"Cannot parse server response\" },\r\n                ],\r\n              });\r\n            }); // something else\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        reject({ errors: [{ param: \"Server\", msg: \"Cannot communicate\" }] });\r\n      }); // connection errors\r\n  });\r\n}\r\n\r\nconst getUsers = async () => {\r\n  // call: GET /api/users\r\n  const response = await fetch(\"/api/users\");\r\n  const users = await response.json();\r\n  if (response.ok) {\r\n    return users;\r\n  }\r\n};\r\n\r\nconst getSuppliers = async () => {\r\n  // call: GET /api/suppliers\r\n  const response = await fetch(\"/api/suppliers\");\r\n  const suppliers = await response.json();\r\n  if (response.ok) {\r\n    return suppliers;\r\n  }\r\n};\r\n\r\nfunction addUser(newUser) {\r\n  // call: POST /api/newUser\r\n  return new Promise((resolve, reject) => {\r\n    fetch(\"/api/newUser\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(newUser),\r\n    })\r\n      .then((response) => {\r\n        if (response.ok) {\r\n          resolve(true);\r\n        } else {\r\n          response\r\n            .json()\r\n            .then((obj) => {\r\n              reject(obj);\r\n            }) // error msg in the response body\r\n            .catch((err) => {\r\n              reject({\r\n                errors: [\r\n                  { param: \"Application\", msg: \"Cannot parse server response\" },\r\n                ],\r\n              });\r\n            }); // something else\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        reject({ errors: [{ param: \"Server\", msg: \"Cannot communicate\" }] });\r\n      }); // connection errors\r\n  });\r\n}\r\n\r\nfunction editUser(username,newUser) {\r\n  // call: PUT /api/users/:username\r\n  return new Promise((resolve, reject) => {\r\n    fetch(\"/api/users/\"+username, {\r\n      method: \"PUT\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(newUser),\r\n    })\r\n      .then((response) => {\r\n        if (response.ok) {\r\n          resolve(true);\r\n        } else {\r\n          response\r\n            .json()\r\n            .then((obj) => {\r\n              reject(obj);\r\n            }) // error msg in the response body\r\n            .catch((err) => {\r\n              reject({\r\n                errors: [\r\n                  { param: \"Application\", msg: \"Cannot parse server response\" },\r\n                ],\r\n              });\r\n            }); // something else\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        reject({ errors: [{ param: \"Server\", msg: \"Cannot communicate\" }] });\r\n      }); // connection errors\r\n  });\r\n}\r\n\r\nfunction deleteUser(username,type){\r\n  return new Promise((resolve, reject) => {\r\n    fetch(\"/api/users/\"+username+\"/\"+type, {\r\n      method: \"DELETE\"\r\n    })\r\n      .then((response) => {\r\n        if (response.ok) {\r\n          resolve(true);\r\n        } else {\r\n          response\r\n            .json()\r\n            .then((obj) => {\r\n              reject(obj);\r\n            }) // error msg in the response body\r\n            .catch((err) => {\r\n              reject({\r\n                errors: [\r\n                  { param: \"Application\", msg: \"Cannot parse server response\" },\r\n                ],\r\n              });\r\n            }); // something else\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        reject({ errors: [{ param: \"Server\", msg: \"Cannot communicate\" }] });\r\n      }); // connection errors\r\n  });\r\n}\r\n\r\nconst getIOIssued = async () => {\r\n  // call: GET /api/internalOrdersIssued\r\n  const response = await fetch(\"/api/internalOrdersIssued\");\r\n  const IOs = await response.json();\r\n  if (response.ok) {\r\n    return IOs;\r\n  }\r\n};\r\n\r\nconst getIOAccepted = async () => {\r\n  // call: GET /api/internalOrdersAccepted\r\n  const response = await fetch(\"/api/internalOrdersAccepted\");\r\n  const IOs = await response.json();\r\n  if (response.ok) {\r\n    return IOs;\r\n  }\r\n};\r\n\r\nconst getSingleIO = async (id) => {\r\n  // call: GET /api/internalOrders/:id\r\n  const response = await fetch(\"/api/internalOrders/\"+id);\r\n  const IO = await response.json();\r\n  if (response.ok) {\r\n    return IO;\r\n  }\r\n};\r\n\r\nfunction addIO(newIO) {\r\n  // call: POST /api/internalOrders\r\n  return new Promise((resolve, reject) => {\r\n    fetch(\"/api/internalOrders\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(newIO),\r\n    })\r\n      .then((response) => {\r\n        if (response.ok) {\r\n          resolve(true);\r\n        } else {\r\n          response\r\n            .json()\r\n            .then((obj) => {\r\n              reject(obj);\r\n            }) // error msg in the response body\r\n            .catch((err) => {\r\n              reject({\r\n                errors: [\r\n                  { param: \"Application\", msg: \"Cannot parse server response\" },\r\n                ],\r\n              });\r\n            }); // something else\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        reject({ errors: [{ param: \"Server\", msg: \"Cannot communicate\" }] });\r\n      }); // connection errors\r\n  });\r\n}\r\n\r\nfunction editIO(id,newIO) {\r\n  // call: PUT /api/internalOrders/:id\r\n  return new Promise((resolve, reject) => {\r\n    fetch(\"/api/internalOrders/\"+id, {\r\n      method: \"PUT\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(newIO),\r\n    })\r\n      .then((response) => {\r\n        if (response.ok) {\r\n          resolve(true);\r\n        } else {\r\n          response\r\n            .json()\r\n            .then((obj) => {\r\n              reject(obj);\r\n            }) // error msg in the response body\r\n            .catch((err) => {\r\n              reject({\r\n                errors: [\r\n                  { param: \"Application\", msg: \"Cannot parse server response\" },\r\n                ],\r\n              });\r\n            }); // something else\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        reject({ errors: [{ param: \"Server\", msg: \"Cannot communicate\" }] });\r\n      }); // connection errors\r\n  });\r\n}\r\n\r\nconst getROIssued = async () => {\r\n  // call: GET /api/restockOrdersIssued\r\n  const response = await fetch(\"/api/restockOrdersIssued\");\r\n  const ROs = await response.json();\r\n  if (response.ok) {\r\n    return ROs;\r\n  }\r\n};\r\n\r\nconst getRO = async () => {\r\n  // call: GET /api/restockOrders\r\n  const response = await fetch(\"/api/restockOrders\");\r\n  const ROs = await response.json();\r\n  if (response.ok) {\r\n    return ROs;\r\n  }\r\n};\r\n\r\nfunction addRO(newRO) {\r\n  // call: POST /api/restockOrder\r\n  return new Promise((resolve, reject) => {\r\n    fetch(\"/api/restockOrder\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(newRO),\r\n    })\r\n      .then((response) => {\r\n        if (response.ok) {\r\n          resolve(true);\r\n        } else {\r\n          response\r\n            .json()\r\n            .then((obj) => {\r\n              reject(obj);\r\n            }) // error msg in the response body\r\n            .catch((err) => {\r\n              reject({\r\n                errors: [\r\n                  { param: \"Application\", msg: \"Cannot parse server response\" },\r\n                ],\r\n              });\r\n            }); // something else\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        reject({ errors: [{ param: \"Server\", msg: \"Cannot communicate\" }] });\r\n      }); // connection errors\r\n  });\r\n}\r\n\r\nfunction editRO(id,newRO) {\r\n  // call: PUT /api/restockOrder/:id\r\n  return new Promise((resolve, reject) => {\r\n    fetch(\"/api/restockOrder/\"+id, {\r\n      method: \"PUT\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(newRO),\r\n    })\r\n      .then((response) => {\r\n        if (response.ok) {\r\n          resolve(true);\r\n        } else {\r\n          response\r\n            .json()\r\n            .then((obj) => {\r\n              reject(obj);\r\n            }) // error msg in the response body\r\n            .catch((err) => {\r\n              reject({\r\n                errors: [\r\n                  { param: \"Application\", msg: \"Cannot parse server response\" },\r\n                ],\r\n              });\r\n            }); // something else\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        reject({ errors: [{ param: \"Server\", msg: \"Cannot communicate\" }] });\r\n      }); // connection errors\r\n  });\r\n}\r\n\r\nfunction addTransportNoteRO(id,newRO) {\r\n  // call: PUT /api/restockOrder/:id/transportNote\r\n  return new Promise((resolve, reject) => {\r\n    fetch(\"/api/restockOrder/\"+id+\"/transportNote\", {\r\n      method: \"PUT\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(newRO),\r\n    })\r\n      .then((response) => {\r\n        if (response.ok) {\r\n          resolve(true);\r\n        } else {\r\n          response\r\n            .json()\r\n            .then((obj) => {\r\n              reject(obj);\r\n            }) // error msg in the response body\r\n            .catch((err) => {\r\n              reject({\r\n                errors: [\r\n                  { param: \"Application\", msg: \"Cannot parse server response\" },\r\n                ],\r\n              });\r\n            }); // something else\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        reject({ errors: [{ param: \"Server\", msg: \"Cannot communicate\" }] });\r\n      }); // connection errors\r\n  });\r\n}\r\n\r\nconst getSKUItems = async () => {\r\n  // call: GET /api/skuitems\r\n  const response = await fetch(\"/api/skuitems\");\r\n  const SKUItems = await response.json();\r\n  if (response.ok) {\r\n    return SKUItems;\r\n  }\r\n};\r\n\r\nfunction addSKUItem(newSkuItem) {\r\n  // call: POST /api/skuitem\r\n  return new Promise((resolve, reject) => {\r\n    fetch(\"/api/skuitem\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(newSkuItem),\r\n    })\r\n      .then((response) => {\r\n        if (response.ok) {\r\n          resolve(true);\r\n        } else {\r\n          response\r\n            .json()\r\n            .then((obj) => {\r\n              reject(obj);\r\n            }) // error msg in the response body\r\n            .catch((err) => {\r\n              reject({\r\n                errors: [\r\n                  { param: \"Application\", msg: \"Cannot parse server response\" },\r\n                ],\r\n              });\r\n            }); // something else\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        reject({ errors: [{ param: \"Server\", msg: \"Cannot communicate\" }] });\r\n      }); // connection errors\r\n  });\r\n}\r\n\r\nconst getSingleRO = async (id) => {\r\n  // call: GET /api/restockOrders/:id\r\n  const response = await fetch(\"/api/restockOrders/\"+id);\r\n  const RO = await response.json();\r\n  if (response.ok) {\r\n    return RO;\r\n  }\r\n};\r\n\r\nfunction addSkuItemsRO(id,newRO) {\r\n  // call: PUT /api/restockOrder/:id/skuItems\r\n  return new Promise((resolve, reject) => {\r\n    fetch(\"/api/restockOrder/\"+id+\"/skuItems\", {\r\n      method: \"PUT\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(newRO),\r\n    })\r\n      .then((response) => {\r\n        if (response.ok) {\r\n          resolve(true);\r\n        } else {\r\n          response\r\n            .json()\r\n            .then((obj) => {\r\n              reject(obj);\r\n            }) // error msg in the response body\r\n            .catch((err) => {\r\n              reject({\r\n                errors: [\r\n                  { param: \"Application\", msg: \"Cannot parse server response\" },\r\n                ],\r\n              });\r\n            }); // something else\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        reject({ errors: [{ param: \"Server\", msg: \"Cannot communicate\" }] });\r\n      }); // connection errors\r\n  });\r\n}\r\n\r\nfunction addTestResult(newTestResult) {\r\n  // call: POST /api/skuitems/testResult\r\n  return new Promise((resolve, reject) => {\r\n    fetch(\"/api/skuitems/testResult\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(newTestResult),\r\n    })\r\n      .then((response) => {\r\n        if (response.ok) {\r\n          resolve(true);\r\n        } else {\r\n          response\r\n            .json()\r\n            .then((obj) => {\r\n              reject(obj);\r\n            }) // error msg in the response body\r\n            .catch((err) => {\r\n              reject({\r\n                errors: [\r\n                  { param: \"Application\", msg: \"Cannot parse server response\" },\r\n                ],\r\n              });\r\n            }); // something else\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        reject({ errors: [{ param: \"Server\", msg: \"Cannot communicate\" }] });\r\n      }); // connection errors\r\n  });\r\n}\r\n\r\nconst getTestResults = async (rfid) => {\r\n  // call: GET /api/skuitems/:rfid/testResults\r\n  const response = await fetch(\"/api/skuitems/\"+rfid+\"/testResults\");\r\n  const TestResults = await response.json();\r\n  if (response.ok) {\r\n    return TestResults;\r\n  }\r\n};\r\n\r\nconst getSingleSKUItem = async (rfid) => {\r\n  // call: GET /api/skuitems/:rfid\r\n  const response = await fetch(\"/api/skuitems/\"+rfid);\r\n  const item = await response.json();\r\n  if (response.ok) {\r\n    return item;\r\n  }\r\n};\r\n\r\nfunction editSKUItem(rfid,newSKUItem) {\r\n  // call: PUT /api/skuitems/:rfid\r\n  return new Promise((resolve, reject) => {\r\n    fetch(\"/api/skuitems/\"+rfid, {\r\n      method: \"PUT\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(newSKUItem),\r\n    })\r\n      .then((response) => {\r\n        if (response.ok) {\r\n          resolve(true);\r\n        } else {\r\n          response\r\n            .json()\r\n            .then((obj) => {\r\n              reject(obj);\r\n            }) // error msg in the response body\r\n            .catch((err) => {\r\n              reject({\r\n                errors: [\r\n                  { param: \"Application\", msg: \"Cannot parse server response\" },\r\n                ],\r\n              });\r\n            }); // something else\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        reject({ errors: [{ param: \"Server\", msg: \"Cannot communicate\" }] });\r\n      }); // connection errors\r\n  });\r\n}\r\n\r\nconst getSKUItemsToReturn = async (id) => {\r\n  // call: GET /api/restockOrders/:id/returnItems\r\n  const response = await fetch(\"/api/restockOrders/\"+id+\"/returnItems\");\r\n  const items = await response.json();\r\n  if (response.ok) {\r\n    return items;\r\n  }\r\n};\r\n\r\nfunction addREO(newREO) {\r\n  // call: POST /api/returnOrder\r\n  return new Promise((resolve, reject) => {\r\n    fetch(\"/api/returnOrder\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(newREO),\r\n    })\r\n      .then((response) => {\r\n        if (response.ok) {\r\n          resolve(true);\r\n        } else {\r\n          response\r\n            .json()\r\n            .then((obj) => {\r\n              reject(obj);\r\n            }) // error msg in the response body\r\n            .catch((err) => {\r\n              reject({\r\n                errors: [\r\n                  { param: \"Application\", msg: \"Cannot parse server response\" },\r\n                ],\r\n              });\r\n            }); // something else\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        reject({ errors: [{ param: \"Server\", msg: \"Cannot communicate\" }] });\r\n      }); // connection errors\r\n  });\r\n}\r\n\r\nconst getItem = async () => {\r\n  // call: GET /api/items\r\n  const response = await fetch(\"/api/items\");\r\n  const items = await response.json();\r\n  if (response.ok) {\r\n    return items;\r\n  }\r\n};\r\n\r\nfunction addItem(newItem) {\r\n  // call: POST /api/item\r\n  return new Promise((resolve, reject) => {\r\n    fetch(\"/api/item\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(newItem),\r\n    })\r\n      .then((response) => {\r\n        if (response.ok) {\r\n          resolve(true);\r\n        } else {\r\n          response\r\n            .json()\r\n            .then((obj) => {\r\n              reject(obj);\r\n            }) // error msg in the response body\r\n            .catch((err) => {\r\n              reject({\r\n                errors: [\r\n                  { param: \"Application\", msg: \"Cannot parse server response\" },\r\n                ],\r\n              });\r\n            }); // something else\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        reject({ errors: [{ param: \"Server\", msg: \"Cannot communicate\" }] });\r\n      }); // connection errors\r\n  });\r\n}\r\n\r\nfunction editItem(id,newItem) {\r\n  // call: PUT /api/item/:id\r\n  return new Promise((resolve, reject) => {\r\n    fetch(\"/api/item/\"+id, {\r\n      method: \"PUT\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(newItem),\r\n    })\r\n      .then((response) => {\r\n        if (response.ok) {\r\n          resolve(true);\r\n        } else {\r\n          response\r\n            .json()\r\n            .then((obj) => {\r\n              reject(obj);\r\n            }) // error msg in the response body\r\n            .catch((err) => {\r\n              reject({\r\n                errors: [\r\n                  { param: \"Application\", msg: \"Cannot parse server response\" },\r\n                ],\r\n              });\r\n            }); // something else\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        reject({ errors: [{ param: \"Server\", msg: \"Cannot communicate\" }] });\r\n      }); // connection errors\r\n  });\r\n}\r\n\r\nfunction deleteItem(id){\r\n  return new Promise((resolve, reject) => {\r\n    fetch(\"/api/items/\"+id, {\r\n      method: \"DELETE\"\r\n    })\r\n      .then((response) => {\r\n        if (response.ok) {\r\n          resolve(true);\r\n        } else {\r\n          response\r\n            .json()\r\n            .then((obj) => {\r\n              reject(obj);\r\n            }) // error msg in the response body\r\n            .catch((err) => {\r\n              reject({\r\n                errors: [\r\n                  { param: \"Application\", msg: \"Cannot parse server response\" },\r\n                ],\r\n              });\r\n            }); // something else\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        reject({ errors: [{ param: \"Server\", msg: \"Cannot communicate\" }] });\r\n      }); // connection errors\r\n  });\r\n}\r\n\r\n  const API = {\r\n    logIn,\r\n    logOut,\r\n    getUserInfo,\r\n    addPosition,\r\n    getPositions,\r\n    editPosition,\r\n    editPositionBarcode,\r\n    deletePosition,\r\n    getSKU,\r\n    getSingleSKU,\r\n    addSKU,\r\n    editSKU,\r\n    deleteSKU,\r\n    editSKUPosition,\r\n    getTestDescriptors,\r\n    addTestDescriptor,\r\n    editTestDescriptor,\r\n    deleteTestDescriptor,\r\n    getUsers,\r\n    addUser,\r\n    editUser,\r\n    deleteUser,\r\n    getIOIssued,\r\n    getIOAccepted,\r\n    addIO,\r\n    editIO,\r\n    getSingleIO,\r\n    getSuppliers,\r\n    getSingleRO,\r\n    getROIssued,\r\n    getRO,\r\n    addRO,\r\n    editRO,\r\n    addTransportNoteRO,\r\n    getSKUItems,\r\n    addSKUItem,\r\n    addSkuItemsRO,\r\n    addTestResult,\r\n    getTestResults,\r\n    getSingleSKUItem,\r\n    editSKUItem,\r\n    getSKUItemsToReturn,\r\n    addREO,\r\n    getItem,\r\n    addItem,\r\n    editItem,\r\n    deleteItem\r\n    \r\n  };\r\n  export default API;"]},"metadata":{},"sourceType":"module"}